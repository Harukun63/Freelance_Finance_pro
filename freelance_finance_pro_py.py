# -*- coding: utf-8 -*-
"""Freelance_Finance_pro.py

Automatically generated by Colab.

The original file is located at
    https://colab.research.google.com/drive/1L6ZYZxAsxtuGEn3ceSgmZKyQ55mzPbem
"""
import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objs as go
def main():
    # Page configuration
    st.set_page_config(
        page_title="FreelanceFinance Pro",
        page_icon="💼",
        layout="wide"
    )

    # Main title
    st.title("🚀 FreelanceFinance Pro")
    st.subheader("Financial Management for Gig Economy Workers")

    # Sidebar navigation
    menu = st.sidebar.radio("Navigation", [
        "Income Tracking",
        "Tax Estimation",
        "Expense Management",
        "Financial Dashboard"
    ])

    # Conditional module rendering
    if menu == "Income Tracking":
        income_data = income_tracking_module()
    elif menu == "Tax Estimation":
        tax_estimation_module()
    elif menu == "Expense Management":
        expense_management_module()
    elif menu == "Financial Dashboard":
        financial_health_dashboard()

if __name__ == "__main__":
    main()

def income_tracking_module():
    st.header("💰 Income Tracking")

    # Income source selection
    income_sources = [
        "Freelance Writing",
        "Web Development",
        "Graphic Design",
        "Consulting",
        "Other"
    ]

    # Create input columns
    cols = st.columns(len(income_sources))
    income_data = {}

    for i, source in enumerate(income_sources):
        with cols[i]:
            income = st.number_input(
                f"{source} Income",
                min_value=0.0,
                key=f"income_{source}"
            )
            income_data[source] = income

    # Visualization
    if any(income_data.values()):
        # Filter out zero values
        filtered_income = {k: v for k, v in income_data.items() if v > 0}

        # Create DataFrame
        df_income = pd.DataFrame.from_dict(
            filtered_income,
            orient='index',
            columns=['Income']
        )
        df_income.reset_index(inplace=True)
        df_income.columns = ['Income Source', 'Income']

        # Pie chart
        fig = px.pie(
            df_income,
            values='Income',
            names='Income Source',
            title='Income Sources Breakdown'
        )
        st.plotly_chart(fig)

        # Total income
        total_income = sum(filtered_income.values())
        st.metric("Total Monthly Income", f"${total_income:,.2f}")

    return income_data

def calculate_taxes(income):
    """
    Calculate taxes based on progressive tax brackets
    """
    tax_brackets = [
        (0, 50000, 0),
        (50001, 100000, 0.05),
        (100001, 500000, 0.10),
        (500001, float('inf'), 0.15)
    ]

    total_tax = 0
    breakdown = []

    for lower, upper, rate in tax_brackets:
        if income > lower:
            taxable_amount = min(income, upper) - lower
            tax = taxable_amount * rate
            total_tax += tax
            breakdown.append({
                'Bracket': f'${lower:,} - ${upper:,}',
                'Rate': f'{rate*100}%',
                'Taxable Amount': f'${taxable_amount:,.2f}',
                'Tax': f'${tax:,.2f}'
            })

    return total_tax, breakdown

def tax_estimation_module():
    st.header("💸 Tax Estimation Tool")

    # Income input
    annual_income = st.number_input(
        "Enter Your Annual Income",
        min_value=0.0,
        format="%.2f"
    )

    # Calculate taxes
    quarterly_income = annual_income / 4
    annual_tax, tax_breakdown = calculate_taxes(annual_income)
    quarterly_tax = annual_tax / 4

    # Display tax metrics
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("Annual Income", f"${annual_income:,.2f}")
    with col2:
        st.metric("Annual Tax", f"${annual_tax:,.2f}")
    with col3:
        st.metric("Effective Tax Rate", f"{(annual_tax/annual_income)*100:.2f}%")

    # Tax Breakdown Table
    st.subheader("Tax Bracket Breakdown")
    st.table(tax_breakdown)

    # Tax Projection Visualization
    tax_projection_data = [
        go.Bar(
            x=['Quarterly Tax'],
            y=[quarterly_tax],
            text=[f'${quarterly_tax:,.2f}'],
            textposition='auto'
        )
    ]

    tax_layout = go.Layout(
        title='Quarterly Tax Projection',
        yaxis_title='Tax Amount ($)'
    )

    fig = go.Figure(data=tax_projection_data, layout=tax_layout)
    st.plotly_chart(fig)

def expense_management_module():
    st.header("📊 Expense Management")

    # Expense categories
    expense_categories = [
        "Rent/Mortgage",
        "Utilities",
        "Internet/Phone",
        "Transportation",
        "Food",
        "Insurance",
        "Business Expenses",
        "Other"
    ]

    # Expense input
    expense_data = {}
    for category in expense_categories:
        expense = st.number_input(
            f"{category} Expense",
            min_value=0.0,
            key=f"expense_{category}"
        )
        expense_data[category] = expense

    # Filter and process expenses
    filtered_expenses = {k: v for k, v in expense_data.items() if v > 0}

    if filtered_expenses:
        # Create DataFrame
        df_expenses = pd.DataFrame.from_dict(
            filtered_expenses,
            orient='index',
            columns=['Amount']
        )
        df_expenses.reset_index(inplace=True)
        df_expenses.columns = ['Category', 'Amount']

        # Expense breakdown visualization
        fig = px.pie(
            df_expenses,
            values='Amount',
            names='Category',
            title='Expense Categories Breakdown'
        )
        st.plotly_chart(fig)

        # Total and average expenses
        total_expenses = sum(filtered_expenses.values())
        st.metric("Total Monthly Expenses", f"${total_expenses:,.2f}")

        # Expense saving recommendations
        st.subheader("💡 Expense Insights")
        if total_expenses > 0.5 * st.session_state.get('total_income', 0):
            st.warning("Your expenses are high compared to your income. Consider reducing discretionary spending.")
        else:
            st.success("Your expenses look well-managed!")

def financial_health_dashboard():
    st.header("📈 Financial Health Dashboard")

    # Income Input
    monthly_income = st.number_input(
        "Monthly Income",
        min_value=0.0,
        format="%.2f"
    )

    # Expense Input
    monthly_expenses = st.number_input(
        "Monthly Expenses",
        min_value=0.0,
        format="%.2f"
    )

    # Financial Metrics Calculation
    savings_rate = (monthly_income - monthly_expenses) / monthly_income * 100 if monthly_income > 0 else 0

    # Display Financial Health Metrics
    col1, col2, col3 = st.columns(3)

    with col1:
        st.metric("Monthly Income", f"${monthly_income:,.2f}")

    with col2:
        st.metric("Monthly Expenses", f"${monthly_expenses:,.2f}")

    with col3:
        st.metric("Savings Rate", f"{savings_rate:.2f}%")

    # Financial Health Score Calculation
    def calculate_health_score():
        score = 0
        if savings_rate > 20:
            score += 3
        elif savings_rate > 10:
            score += 2
        elif savings_rate > 0:
            score += 1

        if monthly_expenses < 0.5 * monthly_income:
            score += 2

        return min(score * 20, 100)  # Max score of 100

    health_score = calculate_health_score()

    # Radar Chart for Financial Health
    categories = ['Income', 'Expenses', 'Savings', 'Financial Stability']
    values = [
        monthly_income / 1000,  # Normalize values
        100 - (monthly_expenses / monthly_income * 100) if monthly_income > 0 else 0,
        savings_rate,
        health_score / 20
    ]

    fig = go.Figure(data=go.Scatterpolar(
        r=values,
        theta=categories,
        fill='toself'
    ))

    fig.update_layout(
        title='Financial Health Radar Chart',
        polar=dict(
            radialaxis=dict(
                visible=True,
                range=[0, 100]
            )
        ),
        showlegend=False
    )

    st.plotly_chart(fig)

    # Financial Health Interpretation
    st.subheader("🏆 Financial Health Score")
    if health_score >= 80:
        st.success(f"Excellent Financial Health! Score: {health_score}")
    elif health_score >= 60:
        st.warning(f"Good Financial Health. Score: {health_score}")
    else:
        st.error(f"Needs Improvement. Score: {health_score}")
